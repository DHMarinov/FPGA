/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "xparameters.h"
#include "xuartps.h"

#define length 32

char input(char *buff);
char input(char *buff)
{
	memset(buff, 0x00, length);
	int i = 0;
	char in;

	while (1) {

		in = XUartPs_RecvByte(XPAR_PS7_UART_1_BASEADDR); // reading from terminal
		if (in == 13) // Detects Enter
				{
			break;
		} else {
			if (i < length) {
				buff[i] = in;
				i++;
			}
			else if (i == length) {
				xil_printf("\n The buffer is overflowing!!!\n");
			}
		}
	}
	return 0;
}

int main()
{
    init_platform();

    char buff[length];
    float in = 1.8;
    float ratio = 0;
    float Vmax = 2.5;
    int val = 65535;

    while(1){
    retry:
    print("Set DAC voltage level:\n");
    input(buff);
    printf("%f\n", atof(buff));

    in = atof(buff);

    if (in > 2.5 || in < 0)
     {
    	printf("Incorrect input value: %f\n", in);
    	print("The value must be between 0 and 2.5\n");
    	goto retry;
     }

    ratio = in/Vmax;
    printf("DAC set to: %f, %i\n", ratio, val);

    val = (int)(65535*ratio);
    //printf("%f, %i\n", ratio, val);

    //66060288 = 001111110000000000000000 write and update both DACs
    // Multiply the value by 16 in order to compensate for the 4 LSB zeros
    Xil_Out32(XPAR_AD5065_INTERFACE_0_S00_AXI_BASEADDR, 66060288 + 16*val);
    }
    cleanup_platform();
    return 0;
}
